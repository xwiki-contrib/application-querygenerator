<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Macros.QueryGenerator" locale="">
  <web>Macros</web>
  <name>QueryGenerator</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1514761200000</creationDate>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1514761200000</date>
  <contentUpdateDate>1514761200000</contentUpdateDate>
  <version>1.1</version>
  <title>Query Generator</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>
The Query Generator is here to help you write queries and macros allowing to display data from XWiki.
It also provides the livetable and query macro to help show results using the query generated and can generate a chart macro.

* The livetable macro supports a filters that can be included in the macro and also used dynamically. 
* The query and chart macro support aggregates allowing to calculate numeric fields or count entries for each meta-data.

{{velocity}}
{{html}}
#if($request.appname &amp;&amp; $request.appname!="")
 #set($appDoc = $xwiki.getDocument($request.appname))
 #set($classname = $appDoc.getValue("class"))
#elseif($request.classname)
 #set($classname = $request.classname)
#else
#set($classname = "XWiki.XWikiUsers")
#end
#set($list = $services.query.xwql("from doc.object(AppWithinMinutes.LiveTableClass) as obj order by doc.title").execute())
&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Application&lt;/div&gt;&lt;div class="panel-body"&gt;
&lt;form action=""&gt;
Choose Application &lt;select name="appname"&gt;
&lt;option value=""&gt;---&lt;/option&gt;&gt;
#foreach($appname in $list)
&lt;option value="${escapetool.xml($appname)}"&gt;${xwiki.getDocument($appname).getDisplayTitle()}&lt;/option&gt;
#end
&lt;/select&gt;
or Choose Class: &lt;select name="classname"&gt;
#set($classes = $xwiki.classList)
#foreach($classn in $classes)
&lt;option value="${classn}" #if($classname==$classn) selected #end&gt;$classn&lt;/option&gt;
#end
&lt;/select&gt;
&lt;input type="submit" value="Go" class="button" /&gt;
&lt;/form&gt;
&lt;/div&gt;&lt;/div&gt;
{{/html}}

#set($classDoc = $xwiki.getDocument($classname).getxWikiClass())
#set($qg = $xwiki.parseGroovyFromPage("Macros.QueryGeneratorGroovy"))
#set($ok = $qg.setXWiki($xwiki, $context, $services))

## Code
#set($query = $qg.createQueryFromRequest($classname))
#set($class = $xwiki.getDocument($classname).xWikiClass)

#set($searchdisplayfields = $query.searchdisplayfields)
#set($fields = $qg.getPropertyList($classDoc))
#if($searchdisplayfields.size()==0)
#set($searchdisplayfields = "")
#end
#set($mydoc = $xwiki.getDocument("Sandbox.Sandbox"))
#set($ok = $mydoc.newObject($classname))
#set($ok = $mydoc.use($classname))
{{html clean=false}}
&lt;form action="" method="get"&gt;
&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Filters&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;div class="row"&gt;
&lt;input type="hidden" name="query" value="1" /&gt;
&lt;input type="hidden" name="classname" value="$classname" /&gt;
#set($even = true)
#set($classes = "col-md-6")
#set($fieldList = [])
#foreach($field in $fields)
 #if(!$fieldList.contains($field))
&lt;div class="col-sm-6" style="min-height: 50px; padding-bottom: 10px;"&gt;&lt;div class="row"&gt;
&lt;div class="${classes}"&gt;&lt;b&gt;${qg.displayPrettyName($field,$mydoc)}&lt;/b&gt;&lt;/div&gt;&lt;div class="${classes}"&gt;$qg.displaySearch($field, $classname, $query, $fieldList)&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
 #end
#end
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Columns&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;div class="row"&gt;
&lt;div class="col-sm-6" style="min-height: 50px; padding-bottom: 10px;" &gt;&lt;div class="row"&gt;
&lt;div class="col-md-4"&gt;&lt;b&gt;Columns&lt;/b&gt;&lt;/div&gt;&lt;div class="col-md-8"&gt;$qg.displaySearchColumns($classname, "", $query, $mydoc)&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="col-sm-6" style="min-height: 50px; padding-bottom: 10px;"&gt;&lt;div class="row"&gt;
&lt;div class="col-md-4"&gt;&lt;b&gt;Order by&lt;/b&gt;&lt;/div&gt;&lt;div class="col-md-8"&gt;$qg.displaySearchOrder($classname, "", $query, $mydoc)&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="col-sm-6"&gt;&lt;div class="row"&gt;
&lt;div class="col-md-4"&gt;&lt;b&gt;Aggregate Columns&lt;/b&gt;&lt;/div&gt;&lt;div class="col-md-8"&gt;$qg.displaySearchAggregateColumns($classname, "", $query, $mydoc)&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Output&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;div class="row"&gt;
&lt;div class="col-sm-3"&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/div&gt;
&lt;div class="col-sm-9"&gt;
#if($request.output)
 #set($output = $request.getParameterValues("output"))
#else
 #set($output = ["livetable"])
#end
&lt;input type="checkbox" name="output" value="livetable" #if($output.contains("livetable"))checked#end /&gt; Livetable
&lt;input type="checkbox" name="output" value="table" #if($output.contains("table"))checked#end/&gt; Table (XWQL)
&lt;input type="checkbox" name="output" value="table-hql" #if($output.contains("table-hql"))checked#end/&gt; Table (HQL)
&lt;input type="checkbox" name="output" value="chart" #if($output.contains("chart"))checked#end/&gt; Chart
&lt;input type="submit" value="Go" class="button" /&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/form&gt;

#if($request.query)
&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Macros&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;div class="row"&gt;
#if($request.searchorder)
#set($order=$request.searchorder)
#set($selectedColumn = $listtool.get($order.split(" "),0))
#set($defaultOrder = $listtool.get($order.split(" "),1))
#end

#set($xwlquery = $qg.makeQuery($query))
#set($hqlquery = $qg.makeHQLQuery($query))
#set($ltFilters = $qg.makeLiveTableFilters($query))
#set($searchColumns = [])
#foreach($field in $query.searchdisplayfields)
 #set($ok = $searchColumns.add($field.replaceAll("${classname}_","")))
#end
#set($columns = $stringtool.join($searchColumns,","))
#if($searchColumns.size()==1)
 #set($colName = $listtool.get($searchColumns,0))
 #if($colName.startsWith("COL_"))
  #set($columns = $colName.replaceAll("COL_(.*?)_",""))
  #if(!$columns.startsWith("doc."))
   #set($functionColName = "prop.value")
  #end
  #set($functionName = $colName.replaceAll("COL_(.*?)_.*",'$1'))
  #if($functionName=="YEAR")
   #set($function = "year(${functionColName})")
  #elseif($functionName=="MONTH")
   #set($function = "100*year(${functionColName})+month(${functionColName})")
  #elseif($functionName=="DAY")
   #set($function = "10000*year(${functionColName})+100*month(${functionColName})+day(${functionColName})")
  #end
 #end
#end
#set($aggColumns = [])
#foreach($field in $query.searchaggfields)
 #set($ok = $aggColumns.add($field.replaceAll("${classname}_","")))
#end
#set($aggcolumns = $stringtool.join($aggColumns,","))
#if($aggColumns&amp;&amp;$aggcolumns!="")
 #set($queryColumns = "${columns},${aggcolumns}")
#else
 #set($queryColumns = $columns)
#end
#set($fromAndWhere = $qg.getHQLFromAndWhere($query))
## get chart aggregate
#if($aggColumns &amp;&amp; $aggColumns.size()==1)
 #if($aggcolumns=="AGG_COUNT")
  #set($aggColumn = "doc.fullName")
  #set($aggFunction = "count")
 #elseif($aggcolumns=="AGG_COUNTDISTINCT")
  #set($aggColumn = "distinct doc.fullName")
  #set($aggFunction = "count")
 #elseif($aggcolumns.startsWith("AGG_"))
  #set($aggFunction = $listtool.get($aggcolumns.split("_"),1).toLowerCase())
  #set($aggColumn = $listtool.get($aggcolumns.split("_"),2))
 #end
#end

&lt;div class="col-sm-3 col-xs-12" &gt;&lt;b&gt;Query (xwql):&lt;/b&gt;&lt;/div&gt;
&lt;div class="col-sm-9 col-xs-12" style="padding-bottom: 10px"&gt;$xwlquery&lt;/div&gt;
&lt;div class="col-sm-3 col-xs-12"&gt;&lt;b&gt;Table Macro (XWQL):&lt;/b&gt;&lt;/div&gt;
&lt;div class="col-sm-9 col-xs-12" style="padding-bottom: 10px"&gt;
{{query query="$xwlquery" class="$classname" columns="$queryColumns" headers="1" links="0" actions="1" /}}
&lt;/div&gt;
&lt;div class="col-sm-3 col-xs-12"&gt;&lt;b&gt;Query (hql):&lt;/b&gt;&lt;/div&gt;
&lt;div class="col-sm-9 col-xs-12" style="padding-bottom: 10px"&gt;$hqlquery&lt;/div&gt;
&lt;div class="col-sm-3 col-xs-12"&gt;&lt;b&gt;Table Macro (HQL):&lt;/b&gt;&lt;/div&gt;
&lt;div class="col-sm-9 col-xs-12" style="padding-bottom: 10px"&gt;
{{query query="$hqlquery" type="hql" class="$classname" columns="$queryColumns" headers="1" links="0" actions="1" /}}
&lt;/div&gt;
&lt;div class="col-sm-3 col-xs-12"&gt;&lt;b&gt;Livetable Macro:&lt;/b&gt;&lt;/div&gt;
&lt;div class="col-sm-9  col-xs-12" style="padding-bottom: 10px"&gt;
{{livetable #if($request.appname)app="${request.appname}"#else className="${classname}" #end columns="${columns}" #if($selectedColumn&amp;&amp;$selectedColumn!="__defaultsorting__")selectedColumn="${selectedColumn}"#end #if($defaultOrder)defaultOrder="${defaultOrder}"#end #if($ltFilters!="")extraParams="${ltFilters}"#end /}}
&lt;/div&gt;
&lt;div class="col-sm-3 col-xs-12"&gt;&lt;b&gt;Chart Macro:&lt;/b&gt;&lt;/div&gt;
&lt;div class="col-sm-9 col-xs-12" style="padding-bottom: 10px"&gt;
{{awmchart #if($request.appname)app="${request.appname}"#else className="$classname" #end category="${columns}" #if($function)function="${function}"#end type="pie" title="Chart" width="500" height="500" table="1" #if($fromAndWhere.fromQL)fromHQL="${fromAndWhere.fromQL}"#end #if($fromAndWhere.whereQL)whereHQL="${fromAndWhere.whereQL}"#end #if($aggColumn)aggregate="${aggColumn}"#end #if($aggFunction)aggregateFunction="${aggFunction}"#end /}}
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
{{/html}}

#if($output.contains("livetable"))
(% class="panel panel-default" %)
(((
(% class="panel-heading" %)((( Livetable Preview )))
(% class="panel-body" %)
(((
#if($aggColumns &amp;&amp; $aggColumns.size()&gt;0)
{{warning}}Warning: Aggregate columns are not supported by the livetable{{/warning}}

#end

{{livetable #if($request.appname)app="${request.appname}"#else className="$classname" #end columns="${columns}" #if($selectedColumn&amp;&amp;$selectedColumn!="__defaultsorting__")selectedColumn="${selectedColumn}"#end #if($defaultOrder)defaultOrder="${defaultOrder}"#end #if($ltFilters!="")extraParams="${ltFilters}"#end /}}
)))
)))
#end

#if($output.contains("table"))
(% class="panel panel-default" %)
(((
(% class="panel-heading" %)((( Table (XWQL) Preview )))
(% class="panel-body" %)
(((
#if($xcontext.hasRelationalStorageGroupBy)
{{warning}}Warning: Multiple select relational storage columns are not supported by XWQL for grouping{{/warning}}

#end

#if($xcontext.hasRelationalStorageSort)
{{warning}}Warning: Multiple select relational storage columns are not supported by XWQL for sorting{{/warning}}

#end
#if($aggColumns.size()&gt;0 &amp;&amp; $searchColumns.size()==0)
{{warning}}Warning: At last one column is needed for a query with an aggregate{{/warning}}

#end

{{query query="$xwlquery" class="$classname" columns="$queryColumns" headers="1" links="0" actions="1" /}}
)))
)))
#end

#if($output.contains("table-hql"))
(% class="panel panel-default" %)
(((
(% class="panel-heading" %)((( Table (HQL) Preview )))
(% class="panel-body" %)
(((
#if($aggColumns.size()&gt;0 &amp;&amp; $searchColumns.size()==0)
{{warning}}Warning: At last one column is needed for a query with an aggregate{{/warning}}

#end

{{query query="$hqlquery" type="hql" class="$classname" columns="$queryColumns" headers="1" links="0" actions="1" /}}
)))
)))
#end

#if($output.contains("chart"))
(% class="panel panel-default" %)
(((
(% class="panel-heading" %)((( Chart Preview )))
(% class="panel-body" %)
(((
#if($searchColumns.size()==0)
{{warning}}Warning: At last one column is needed for a chart macro{{/warning}}

#end
#if($searchColumns.size()&gt;1)
{{warning}}Warning: Only one column can be used by the chart macro{{/warning}}

#end
#if($aggColumns &amp;&amp; $aggColumns.size()&gt;1)
{{warning}}Warning: Only one Aggregate column is supported by the chart macro{{/warning}}

#end
{{awmchart #if($request.appname)app="${request.appname}"#else className="$classname" #end category="${columns}" #if($function)function="${function}"#end type="pie" title="Chart" width="500" height="500" table="1" #if($fromAndWhere.fromQL)fromHQL="${fromAndWhere.fromQL}"#end #if($fromAndWhere.whereQL)whereHQL="${fromAndWhere.whereQL}"#end #if($aggColumn)aggregate="${aggColumn}"#end #if($aggFunction)aggregateFunction="${aggFunction}"#end /}}
)))
)))
#end
#end

#if($request.debug)
(% class="panel panel-default" %)
(((
(% class="panel-heading" %)((( Debug )))
(% class="panel-body" %)
(((
DEBUG: $qg.getDebug()
)))
)))
#end
{{/velocity}}</content>
  <object>
    <name>Macros.QueryGenerator</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>9f46805c-8885-42c5-a33a-640697af6ea7</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    'xwiki-selectize': "$xwiki.getSkinFile('uicomponents/suggest/xwiki.selectize.js', true)" +
      "?v=$escapetool.url($xwiki.version)"
  }
});

require(['jquery', 'xwiki-selectize'], function($) {
  'use strict';

  var getSelectizeOptions = function(select) {
   return {
    create: true
   }
  };

  $.fn.suggestPropertyValues = function() {
    return this.each(function() {
      $(this).xwikiSelectize(getSelectizeOptions($(this)));
    });
  };

  $('.suggest-columns').suggestPropertyValues();
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
