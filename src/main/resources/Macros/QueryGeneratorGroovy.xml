<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Macros.QueryGeneratorGroovy" locale="">
  <web>Macros</web>
  <name>QueryGeneratorGroovy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1514761200000</creationDate>
  <parent>Macros.QueryGenerator</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1514761200000</date>
  <contentUpdateDate>1514761200000</contentUpdateDate>
  <version>1.1</version>
  <title>Query Generator Groovy Helper</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>import com.xpn.xwiki.util.Util;
import org.apache.ecs.xhtml.input;
import org.apache.ecs.xhtml.select;
import org.apache.ecs.xhtml.option;
import org.apache.commons.lang3.StringUtils;
import java.text.SimpleDateFormat;
import com.xpn.xwiki.objects.classes.ListClass;

public class QueryGenerator {
 def xwiki;
 def context;
 def request;
 def services;

 def debugStr = "";

 def genericFields = [ "doc.title" : "Title", "doc.name" : "Name", "doc.space" : "Space", "doc.fullName" : "Full name", "doc.location" : "Location", "doc.author" : "Author", "doc.creator" : "Creator", "doc.date" : "Last update Date", "doc.creationDate" : "Creation date", "doc.content" : "Content" ];

 public addDebug(str) {
   debugStr += str + "\n";
 }

 public getDebug() {
   return debugStr;
 }

 public setXWiki(xwiki, context, services) {
   this.xwiki = xwiki;
   this.context = context;
   this.request = context.request;
   this.services = services;
 }

 public getPropertyList(baseClass, withGenericFields) {
   def propList = new ArrayList();
   propList.addAll(baseClass.getPropertyNames());
   if (withGenericFields) {
    for (item in genericFields.keySet()) {
      propList.add(item)
    }
   }
   return propList;
 }

 public displayPrettyName(field, className) {
   if (field.startsWith("doc.")) {
     return genericFields[field];
   } else {
     def fakeDoc = xwiki.getDocument("Sandbox.Sandbox");
     fakeDoc.newObject(className);
     fakeDoc.use(className);
     return fakeDoc.displayPrettyName(field);
   }
 }

 public Map createQueryFromRequest(className) {
   Map query = new HashMap();
   query.put("searchclass", className);
   String[] columns = request.getParameterValues("searchdisplayfields");
   query.put("searchdisplayfields", columns);
   String[] aggcolumns = request.getParameterValues("searchaggfields");
   query.put("searchaggfields", aggcolumns);
    String[] order = request.getParameterValues("searchorder");
   query.put("searchorder", order); 

   def baseClass = xwiki.getDocument(className).getxWikiClass();
   def propList = getPropertyList(baseClass, true);

   for (propname in propList) {
       for (paramName in request.getParameterNames()) {
        if (paramName.startsWith(className + "_" + propname)) {
         def list = Arrays.asList(request.getParameterValues(paramName));
         def value = null;
         if (list.size()&gt;0) {  
           value = (list.size()==1) ? list.getAt(0) : list;
           query.put(paramName.substring(className.length()+1), value);
         }
        }
       }
   }
   return query;
 }

 def addColumn(select, selectlist, prefix, displayNamePrefix, name, displayName) {
       def sdisplayName = ((displayName==null) ? "" : displayName);
       sdisplayName = "${displayNamePrefix} ${sdisplayName}";
       def aggOption = new option(sdisplayName, sdisplayName);
       def sName = "${prefix}";
       if (name!=null)
        sName += name;
       aggOption.setValue(sName);
       if (selectlist.contains(sName)) {
          aggOption.setSelected(true);
       }
       aggOption.addElement(sdisplayName);
       select.addElement(aggOption);
 }
 
 def displaySearchColumns(className, prefix, query, mydoc) {
        addSelectize();
        def select = new select(prefix + "searchdisplayfields", 10);
        select.setMultiple(true);
        select.setName(prefix + "searchdisplayfields");
        select.setID(prefix + "searchdisplayfields");
        select.setClass("suggest-columns");

        def selectlist = query.get("searchdisplayfields");
        if (selectlist==null) selectlist = new ArrayList();
        addSearchColumns(select, selectlist, className, prefix, "", query, mydoc);
        return select.toString();
 }
 
 def addSearchColumns(select, selectlist, className, prefix, displayPrefix, query, mydoc) {
        def baseClass = xwiki.getDocument(className).getxWikiClass();       
        def list = getPropertyList(baseClass, (prefix==""))

        Map&lt;String, String&gt; prettynamesmap = new HashMap&lt;String, String&gt;();
        for (int i = 0; i &lt; list.size(); i++) {
            String propname = list.get(i);
            list.set(i, prefix + propname);
            prettynamesmap.put(prefix + propname, displayPrettyName(propname, className));
        }

        // Add options from Set
        for (propname in list) {
            String displayName = prettynamesmap.get(propname);
            addColumn(select, selectlist, "", displayPrefix, propname, displayName);
  
            def propDef = baseClass.get(propname)
            if ((propDef!=null &amp;&amp; propDef.type.equals("DateClass")) || propname=="doc.creationDate" || propname =="doc.date") {
              addColumn(select, selectlist, "COL_YEAR_", "Year of ", propname, displayName);
              addColumn(select, selectlist, "COL_MONTH_", "Month of ", propname, displayName);
              addColumn(select, selectlist, "COL_DAY_", "Day of ", propname, displayName);
            }

            if (propDef!=null &amp;&amp; propDef.type.equals("DBListClass")) {
               def sql = propDef.getBasePropertyClass().get("sql").getValue();
               def dbListClassName = sql.replaceAll(".*[.]className.*?=.*?'(.*?)'.*","\$1")
               addDebug("Found ${dbListClassName}Â in ${sql}");
               if (xwiki.exists(dbListClassName)) {
                  addSearchColumns(select, selectlist, dbListClassName, "${propname}_", displayName + " - ", query, mydoc);
               }
            }
        }
    }

    def addAggregate(select, selectlist, name, displayName, value, displayValue) {
       def sdisplayValue = ((displayValue==null) ? "" : displayValue);
       def sdisplayName = "${displayName} ${sdisplayValue}";
       def aggOption = new option(sdisplayName, sdisplayName);
       def svalue = "AGG_${name}";
       if (value!=null)
        svalue += "_" + value;
       aggOption.setValue(svalue);
       if (selectlist.contains(svalue)) {
          aggOption.setSelected(true);
       }
       aggOption.addElement(sdisplayName);
       select.addElement(aggOption);
    }
 
    def displaySearchAggregateColumns(className, prefix, query, mydoc) {
        def baseClass = xwiki.getDocument(className).getxWikiClass();
        def select = new select(prefix + "searchaggfields", 10);
        select.setMultiple(true);
        select.setName(prefix + "searchaggfields");
        select.setID(prefix + "searchaggfields");
        select.setClass("suggest-columns");        

        List&lt;String&gt; list = Arrays.asList(baseClass.getPropertyNames());
        Map&lt;String, String&gt; prettynamesmap = new HashMap&lt;String, String&gt;();
        for (int i = 0; i &lt; list.size(); i++) {
            String propname = list.get(i);
            list.set(i, prefix + propname);
            prettynamesmap.put(prefix + propname, baseClass.get(propname).getPrettyName());
        }

        def selectlist = query.get("searchaggfields");
        if (selectlist==null) selectlist = new ArrayList();
        addAggregate(select, selectlist, "COUNT", "count documents", null, null)
        addAggregate(select, selectlist, "COUNTDISTINCT", "count distinct documents", null, null)
        
        // Add aggregate options from Set
        for (value in list) {
            String displayValue = prettynamesmap.get(value);
            def propDef = baseClass.get(value)
            if (propDef.type.equals("NumberClass")) {
               addAggregate(select, selectlist, "SUM", "sum", value, displayValue);
               addAggregate(select, selectlist, "AVG", "avg", value, displayValue);
            } else {
               addAggregate(select, selectlist, "COUNT", "count", value, displayValue);
               addAggregate(select, selectlist, "COUNTDISTINCT", "count distinct", value, displayValue);
            }
        }
        return select.toString();
    }

 def displaySearchOrder(className, prefix, query, mydoc) {
        def baseClass = xwiki.getDocument(className).getxWikiClass();
        def select = new select(prefix + "searchorder", 1);
        select.setMultiple(false);
        select.setName(prefix + "searchorder");
        select.setID(prefix + "searchorder");
        select.setClass("suggest-columns");        

        def defaultOption = new option("","No sorting");
        defaultOption.addElement("No sorting");
        defaultOption.setValue("__defaultsorting__");
        select.addElement(defaultOption);

        def order1Option = new option("","First column (desc)");
        order1Option.addElement("First column (desc)");
        order1Option.setValue("1 desc");
        select.addElement(order1Option);

        order1Option = new option("","First column (asc)");
        order1Option.addElement("First column (asc)");
        order1Option.setValue("1 asc");
        select.addElement(order1Option);

        def order2Option = new option("","Second column (desc)");
        order2Option.addElement("Second column (desc)");
        order2Option.setValue("2 desc");
        select.addElement(order2Option);

        order2Option = new option("","Second column (asc)");
        order2Option.addElement("Second column (asc)");
        order2Option.setValue("2 asc");
        select.addElement(order2Option);
           
        List&lt;String&gt; list = Arrays.asList(baseClass.getPropertyNames());
        Map&lt;String, String&gt; prettynamesmap = new HashMap&lt;String, String&gt;();
        for (int i = 0; i &lt; list.size(); i++) {
            String propname = list.get(i);
            list.set(i, prefix + propname);
            prettynamesmap.put(prefix + propname, baseClass.get(propname).getPrettyName());
        }

        def selectlist = query.get("searchorder");
        if (selectlist==null) selectlist = new ArrayList();

        // Add options from Set
        for (value in list) {
           def queryValue = "";
           def propClass =  baseClass.get(value);
           if (propClass.type.contains("Computed")) {
               if (propClass.getProperty('customDisplay').value == '{{include reference="AppWithinMinutes.Title"/}}') {
                 queryValue = "doc.title";
               } else if (propClass.getProperty('customDisplay').value == '{{include reference="AppWithinMinutes.Content"/}}') {
                 // Sorting on content is not recommended and not supported by livetable
                 // queryValue = "doc.content";
               }
           } else {
                queryValue = value;
           }

           if (queryValue!="") {
            String displayValue = prettynamesmap.get(value);
            def option = new option(displayValue + " asc", displayValue + " asc");
            option.addElement(displayValue + " asc");
            option.setValue(queryValue + " asc");
            if (selectlist.contains(queryValue + " asc")) {
                option.setSelected(true);
            }
            select.addElement(option);

            def optionDesc = new option(displayValue + " desc", displayValue + " desc");
            optionDesc.addElement(displayValue + " desc");
            optionDesc.setValue(queryValue + " desc");
            if (selectlist.contains(queryValue + " desc")) {
                optionDesc.setSelected(true);
            }
            select.addElement(optionDesc);
           }
        }

        return select.toString();
    }

 def makeQuery(query) {
        def xwqlselect = new StringBuffer();
        def xwqlfrom = new StringBuffer();
        def xwqlwhere = new StringBuffer();
        def xwqlgroupBy = new StringBuffer();
        def xwqlorder = new StringBuffer();

        def hasAggregate = false;
        def hasRelationalStorage = false;
        def className = query.get("searchclass");
        def baseClass = xwiki.getDocument(className).getxWikiClass()

        def selectList = new ArrayList();
        def groupByList = new ArrayList();
        def columns = query.get("searchdisplayfields");
        addDebug("columns: ${columns}")
        def aggColumns = query.get("searchaggfields");
        for (col in columns) {
             if (col.startsWith("COL_")) {
                def colName = col.replaceAll("COL_(.*?)_","");
                def functionName = col.replaceAll("COL_(.*?)_(.*)","\$1");
                addDebug("In col ${col} colName: ${colName} functionName: ${functionName}")
                if (!colName.startsWith("doc."))
                   colName = "obj.${colName}"
                if (functionName=="YEAR")
                   colName = "year(${colName})"  
                else if (functionName=="MONTH")
                   colName = "100*year(${colName})+month(${colName})"  
                else if (functionName=="DAY")
                   colName = "10000*year(${colName})+100*month(${colName})+day(${colName})"; 

                selectList.add(colName);
                groupByList.add(colName); 
             } else {
               def propClass = baseClass.get(col);
               if (col.startsWith("doc.")) {
                 selectList.add(col);
                 groupByList.add(col);
               } else {
                 selectList.add("obj.${col}");
                 groupByList.add("obj." + col);
               }
               // check compatibility of XWQL with multiselect relational storage group by fields
               if (propClass!=null &amp;&amp; propClass.getProperty("relationalStorage") &amp;&amp; propClass.getProperty("multiSelect") 
                   &amp;&amp; propClass.getProperty("relationalStorage").getValue()==1 
                   &amp;&amp; propClass.getProperty("multiSelect").getValue()==1) {
                 hasRelationalStorage = true;
               }
            }
        }
        for (col in aggColumns) {
           if (col.startsWith("AGG_")) {
             hasAggregate = true;
             def colName = col.replaceAll("AGG_(.*?)_","");
             if (col=="AGG_COUNT") {
               selectList.add("count(doc.fullName)");  
             } else if (col=="AGG_COUNTDISTINCT") {
               selectList.add("count(distinct doc.fullName)");  
             } else if (col.startsWith("AGG_SUM")) {
               selectList.add("sum(obj.${colName})");
             } else if (col.startsWith("AGG_AVG")) {
               selectList.add("avg(obj.${colName})");
             } else if (col.startsWith("AGG_COUNT")) {
               selectList.add("count(obj.${colName})");
             } else if (col.startsWith("AGG_COUNTDISTINCT")) {
               selectList.add("count(distinct obj.${colName})");
             }
           }
        }

        if (hasAggregate &amp;&amp; hasRelationalStorage) {
           context.put("hasRelationalStorageGroupBy","1")
        }

        xwqlselect.append(selectList.join(","))
        xwqlgroupBy.append(groupByList.join(","))

        xwqlfrom.append("Document as doc, doc.object(" + className + ") as obj");
        def clauseList = new ArrayList();
        for (propName in getPropertyList(baseClass, true)) {
          def propClass = baseClass.get(propName);
          if (propName.startsWith("doc.")) {
            if (propName=="doc.date" || propName=="doc.creationDate") {
              clauseList.addAll(makeQueryDate(propClass, propName, propName, "", query));
            } else {
              clauseList.addAll(makeQueryString(propClass, propName, propName, "", query));
            }
          } else if (propClass.type.contains("ListClass")) {
            clauseList.addAll(makeQueryList(propClass, propName, propName, "obj.", query));
          } else if (propClass.type.contains("NumberClass")) {
            clauseList.addAll(makeQueryNumber(propClass, propName, propName, "obj.", query));
          } else if (propClass.type.contains("BooleanClass")) {
            clauseList.addAll(makeQueryNumber(propClass, propName, propName, "obj.", query));
          } else if (propClass.type.contains("DateClass")) {
            clauseList.addAll(makeQueryDate(propClass, propName, propName, "obj.", query));
          } else {
            clauseList.addAll(makeQueryString(propClass, propName, propName, "obj.", query));
          }
        }

        xwqlwhere.append("doc.fullName not like '%Template'");
        for (clause in clauseList)
         xwqlwhere.append(" and " + clause); 
        
        if (query.get("searchorder")!=null &amp;&amp; query.get("searchorder").size()&gt;0) {
         def searchorder = query.get("searchorder").getAt(0)
         if (searchorder!="" &amp;&amp; searchorder!="__defaultsorting__") {
          if (searchorder.startsWith("doc.") || searchorder.startsWith("1 ") || searchorder.startsWith("2 ")) {
           xwqlorder.append(searchorder)
          } else {
            def sortField = searchorder.substring(0, searchorder.indexOf(" "));
            def sortDir = searchorder.substring(searchorder.indexOf(" ") + 1);
            def propClass = baseClass.get(sortField)
            
            // check compatibility of XWQL with multiselect relational storage sort fields
            if (propClass!=null &amp;&amp; propClass.getProperty("relationalStorage") &amp;&amp; propClass.getProperty("multiSelect") &amp;&amp; propClass.getProperty("relationalStorage").getValue()==1 &amp;&amp; propClass.getProperty("multiSelect").getValue()==1) {
               context.put("hasRelationalStorageSort","1")
            }

            // check for computed fields which are not compatible
            if (propClass.type.contains("Computed")) {
               if (propClass.getProperty('customDisplay').value == '{{include reference="AppWithinMinutes.Title"/}}') {
                 xwqlorder.append("doc.title ${sortDir}");
               } else if (propClass.getProperty('customDisplay').value == '{{include reference="AppWithinMinutes.Content"/}}') {
                 xwqlorder.append("doc.content ${sortDir}");
               } else {
                 context.put("hasComputedFieldSort","1");
               }
            } else {
                 xwqlorder.append("obj." + searchorder);
            }
          }
         }
        }

        String xwql = "select doc.fullName";
        if (hasAggregate) {
          xwql = "select " + xwqlselect;
        }

        xwql += " from " + xwqlfrom.toString();
        if (xwqlwhere.length() != 0)
            xwql += " where " + xwqlwhere.toString();
        if (hasAggregate &amp;&amp; xwqlgroupBy.length() != 0)
            xwql += " group by " + xwqlgroupBy.toString();
        if (xwqlorder.length() != 0) {
            xwql += " order by " + xwqlorder.toString();
        }

        return xwql;
  }

  def makeDateLiveTableFilters(clauseList, query, propClass, propName) {
     def value1 = query.get(propName + "_morethan");
     def value2 = query.get(propName + "_lessthan");
     def sdformat = getSimpleDateFormat(propClass, propName);
     def dvalue1 = (value1==null || value1=="") ? null : sdformat.parse(value1);
     def dvalue2 = (value2==null || value2=="") ? null : sdformat.parse(value2);
     if (dvalue1==null &amp;&amp; dvalue2==null)
       return;
     if (dvalue1==null) {
       clauseList.add(propName + "=0-" + dvalue2.time);
     } else if (dvalue2==null) {
       clauseList.add(propName + "=" + dvalue1.time + "-9999999999999");
     } else {
       clauseList.add(propName + "=" + dvalue1.time + "-" + dvalue2.time);
     }
  }

  def makeLiveTableFilters(query) {
        def ltFilters = "";  
        def className = query.get("searchclass");
        def baseClass = xwiki.getDocument(className).getxWikiClass()
        
        def clauseList = new ArrayList();
        def propList = getPropertyList(baseClass, true);

        for (propName in propList) {
          def values = query.get(propName);
          def propClass = baseClass.get(propName);
          if (propName.equals("doc.creationDate") || propName.equals("doc.date")) {
              makeDateLiveTableFilters(clauseList, query, propClass, propName); 
          } else if (propName.startsWith("doc.")) {
              if ((values!=null) &amp;&amp; (values!="")) {  
               clauseList.add(propName + "=" + values); 
              }   
          } else {
           if (propClass.type.contains("DateClass")) {
             makeDateLiveTableFilters(clauseList, query, propClass, propName);             
           } else if ((values != null) &amp;&amp; (!values.equals(""))) {
            if (values instanceof String) {
             clauseList.add(propName + "=" + values);
            } else {
             String[] valuesarray = (String[]) values;
             for (int i = 0; i &lt; valuesarray.length; i++) {
                 clauseList.add(propName + "=" + valuesarray[i]);
            }
           }
          }
         }
        }   
        return clauseList.join("&amp;");
  }

 public String displaySearch(fieldName, className, query, fieldList) {
    def baseClass = xwiki.getDocument(className).getxWikiClass();
    def propClass = baseClass.get(fieldName);
    def prefix = "" + className + "_";
    def name = "";
    if (fieldName.startsWith("doc.")) {
       name = fieldName;
    } else if (propClass!=null &amp;&amp; propClass.type.contains("Computed")) {
       if (propClass.getProperty('customDisplay').value == '{{include reference="AppWithinMinutes.Title"/}}') {
             name = "doc.title";
       } else if (propClass.getProperty('customDisplay').value == '{{include reference="AppWithinMinutes.Content"/}}') {
              name = "doc.content";
       }
     } else {
                name = fieldName;
     }
    
    if (name=="") {
       return "";
    } else {
       fieldList.add(name);
       if (propClass==null) {
         if (name=="doc.date" || name=="doc.creationDate")
          return displaySearchDate(propClass, name, prefix, query);
         else
          return displaySearchString(propClass, name, prefix, query);
       } else if (propClass.type.contains("BooleanClass")) {
         return displaySearchRadio(propClass, name, prefix, query);
       } else if (propClass.type.contains("NumberClass")) {
         return displaySearchNumber(propClass, name, prefix, query);
       } else if (propClass.type.contains("ListClass")) {
         return displaySearchList(propClass, name, prefix, query);
       } else if (propClass.type.contains("DateClass")) {
         return displaySearchDate(propClass, name, prefix, query);
       } else {
         return displaySearchString(propClass, name, prefix, query);
       }
    }
 }

 /*
  String Field
 */
 def displaySearchString(propClass, name, prefix, query) {
        def input = new input();
        input.setType("text");
        input.setName(prefix + name);
        input.setID(prefix + name);
        def fieldFullName = name;
        def data = query.get(fieldFullName);
        String value = "";
        if (data!=null) {
            if (data instanceof List) {
              value= data.getAt(0);
            } else {
             value = data;
            }
        }
        if (value != null) {
            input.setValue(value.toString());
        }
        return input.toString();
 }

 def getDateFormat(propClass, name) {
        def defaultFormat = (context.language=="fr") ? "dd/MM/yyyy" : "MM/dd/yyyy";
        def format =  (name.startsWith("doc.")||propClass==null) ? defaultFormat : propClass.getProperty('dateFormat').value;
        return format;
 }

 def getSimpleDateFormat(propClass, name) {
        return new SimpleDateFormat(getDateFormat(propClass, name));
 }

 def getSQLSimpleDateFormat() {
        return new SimpleDateFormat("yyyy-MM-dd");
 }

 /*
  Date Field
 */
 def displaySearchDate(propClass, name, prefix, query) {
        xwiki.ssfx.use('uicomponents/widgets/datepicker/calendarDateSelect.css', true)
        xwiki.jsfx.use('uicomponents/widgets/datepicker/calendarDateSelect.js', ['forceSkinAction': true, 'language': context.locale])
        xwiki.jsfx.use('uicomponents/widgets/datepicker/simpleDateFormat.js', ['forceSkinAction': true, 'language': context.locale])
        xwiki.ssfx.use('uicomponents/widgets/datepicker/dateTimePicker.css', true)
        xwiki.jsfx.use('uicomponents/widgets/datepicker/dateTimePicker.js')

        def fieldFullName = name;
        def format = getDateFormat(propClass, name);
        def input1 = new input();
        input1.setType("text");
        input1.setName(prefix + name + "_morethan");
        input1.setID(prefix + name + "_morethan");
        input1.setClass("datetime");
        input1.setTitle(format);
        def data1 = query.get(fieldFullName + "_morethan");
        String value1 = "";
        if (data1!=null) {
            if (data1 instanceof List) {
              value1 = data1.getAt(0);
            } else {
             value1 = data1;
            }
        }
        if (value1 != null) {
            input1.setValue(value1.toString());
        }
        def input2 = new input();
        input2.setType("text");
        input2.setName(prefix + name + "_lessthan");
        input2.setID(prefix + name + "_lessthan");
        input2.setClass("datetime");
        input2.setTitle(format);
        def data2 = query.get(fieldFullName + "_lessthan");
        String value2 = "";
        if (data2!=null) {
            if (data2 instanceof List) {
              value2 = data2.getAt(0);
            } else {
             value2 = data2;
            }
        }
        if (value2 != null) {
            input2.setValue(value2.toString());
        }
 
        return "&lt;b&gt;From:&lt;/b&gt;&lt;br/&gt;" + input1.toString() + "&lt;br/&gt;&lt;b&gt;To:&lt;/b&gt;&lt;br/&gt;" + input2.toString();
 }

 /*
  Number Field
 */
 def displaySearchNumber(propClass, name, prefix, query) {
        def fieldFullName = name;

        def input0 = new input();
        input0.setType("text");
        input0.setName(prefix + name);
        input0.setID(prefix + name);
        def data0 = query.get(fieldFullName);
        String value0 = "";
        if (data0!=null) {
            if (data0 instanceof List) {
              value0 = data0.getAt(0);
            } else {
             value0 = data0;
            }
        }
        if (value0 != null) {
            input0.setValue(value0.toString());
        }

        def input1 = new input();
        input1.setType("text");
        input1.setName(prefix + name + "_morethan");
        input1.setID(prefix + name + "_morethan");
        def data1 = query.get(fieldFullName + "_morethan");
        String value1 = "";
        if (data1!=null) {
            if (data1 instanceof List) {
              value1 = data1.getAt(0);
            } else {
             value1 = data1;
            }
        }
        if (value1 != null) {
            input1.setValue(value1.toString());
        }
        def input2 = new input();
        input2.setType("text");
        input2.setName(prefix + name + "_lessthan");
        input2.setID(prefix + name + "_lessthan");
        def data2 = query.get(fieldFullName + "_lessthan");
        String value2 = "";
        if (data2!=null) {
            if (data2 instanceof List) {
              value2 = data2.getAt(0);
            } else {
             value2 = data2;
            }
        }
        if (value2 != null) {
            input2.setValue(value2.toString());
        }
 
        return "&lt;b&gt;Exact value:&lt;/b&gt;&lt;br/&gt;" + input0.toString() + "&lt;br /&gt;&lt;b&gt;From:&lt;/b&gt;&lt;br/&gt;" + input1.toString() + "&lt;br/&gt;&lt;b&gt;To:&lt;/b&gt;&lt;br/&gt;" + input2.toString();
 }

 def makeQueryString(propClass, name, prefix, queryTablePrefix, map) {
        def clauseList = new ArrayList();
        def fullPropName = queryTablePrefix + name;

        String value = (String) map.get(prefix);
        if ((value != null) &amp;&amp; (!value.equals(""))) {
            String startsWith = (String) map.get(prefix + "startswith");
            String endsWith = (String) map.get(prefix + "endswith");
            if ("1".equals(startsWith)) {
                clauseList.add("lower(" + fullPropName + ") like '" + value.toLowerCase() + "%'");
            } else if ("1".equals(endsWith)) {
                clauseList.add("lower(" + fullPropName + ") like '%" + value.toLowerCase() + "'");
            } else {
                clauseList.add("lower(" + fullPropName + ") like '%" + value.toLowerCase() + "%'");
            }
        }

        value = (String) map.get(prefix + "exact");
        if ((value != null) &amp;&amp; (!value.equals(""))) {
            clauseList.add(fullPropName + "='" + value + "'");
        }

        value = (String) map.get(prefix + "not");
        if ((value != null) &amp;&amp; (!value.equals(""))) {
            clauseList.add(fullPropName + "!='" + value + "'");
        }
        return clauseList;
  }

  /*
   List Field
  */
  def displaySearchList(propClass, name, prefix, query) {
    def displayType = propClass.getBasePropertyClass().getDisplayType()
    if (displayType.equals("input")) {
            return displaySearchSelect(propClass, name, prefix, query);
    } else if (displayType.equals("radio") || displayType.equals("checkbox")) {
            return displaySearchCheckbox(propClass, name, prefix, query);
    } else {
            return displaySearchSelect(propClass, name, prefix, query);
    }
  }

  def displaySearchCheckbox(propClass, name, prefix, query) {
        StringBuffer buffer = new StringBuffer();
        def list = propClass.getListValues();
        def fieldFullName = name;
        def selectlist = query.get(fieldFullName);
        def pClass = propClass.getBasePropertyClass();
       
        // Add options from Set
        for (rawvalue in list) {
            String value = pClass.getElementValue(rawvalue);
            String display = pClass.getDisplayValue(rawvalue, fieldFullName, propClass.getMapValues(), context.getContext());
            def radio =
                new input(input.checkbox, prefix + name, value);

            if (selectlist!=null &amp;&amp; selectlist.contains(value)) {
                radio.setChecked(true);
            }
            radio.addElement(display);
            buffer.append(radio.toString());
            buffer.append("&lt;br/&gt;");            
        }
        return buffer.toString();
    }

  def displaySearchRadio(propClass, name, prefix, query) {
        StringBuffer buffer = new StringBuffer();
        def fieldFullName = name;
        def selectlist = query.get(fieldFullName);
        def pClass = propClass.getBasePropertyClass();
       
        def radio1 = new input(input.radio, prefix + name, "1");
        radio1.addElement("Yes");
        def radio2 = new input(input.radio, prefix + name, "0");
        radio2.addElement("No");
        if (selectlist!=null) {
          if (selectlist.contains("1")) {
            radio1.setChecked(true);
          } else if (selectlist.contains("0")) {
            radio2.setChecked(true);
          }
        }
        buffer.append(radio1.toString());
        buffer.append("&lt;br /&gt;");
        buffer.append(radio2.toString());
        return buffer.toString();
    }

 def addSelectize() {
       xwiki.linkx.use(services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'), ['type': 'text/css', 'rel': 'stylesheet'])
        xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true)
        xwiki.jsx.use("Macros.QueryGenerator");
        xwiki.jsfx.use('uicomponents/suggest/suggestPropertyValues.js', ['forceSkinAction' : true, 'language' : context.locale])
 }

 def displaySearchSelect(propClass, name, prefix, query) {
        def select = new select(prefix + name, 1);
        select.setMultiple(true);
        select.setSize(1);
        select.setName(prefix + name);
        select.setID(prefix + name);
        select.setClass("suggest-propertyValues");
        select.addAttribute("data-className", propClass.getClassName())
        select.addAttribute("data-propertyName", name)

        def isMultiSelect = propClass.getProperty('multiSelect').value;
        def list = propClass.getListValues();
        def fieldFullName = name;
        def selectlist = query.get(fieldFullName);
        def pClass = propClass.getBasePropertyClass();  
        def mapValues = propClass.getMapValues();      

        // Add options from Set
        def count = 0;
        for (String rawvalue : list) {
            if (count&gt;50)
             break;
            String value = pClass.getElementValue(rawvalue);
            String display = pClass.getDisplayValue(rawvalue, fieldFullName, mapValues , context.getContext());
            def option = new option(display, value);
            option.addElement(display);
            if (selectlist!=null &amp;&amp; selectlist.contains(value)) {
                option.setSelected(true);
            }
            select.addElement(option);
            count++;
        }

        if (isMultiSelect) {

        }

        return select.toString();
    }

 def makeQueryList(propClass, name, prefix, queryTablePrefix, map) {
       def clauseList = new ArrayList();
       def fullPropName = queryTablePrefix + name;
       def pClass = propClass.getBasePropertyClass();   
  
       def values = map.get(prefix);
        if ((values == null) || (values.equals(""))) {
            return clauseList;
        }
        def separator = pClass.isMultiSelect() ? " member of " : " = ";
        if (values instanceof String) {
            // general comparison '=' - tests at least one value =
            clauseList.add("'" + values.toString() + "'" + separator + fullPropName);
        } else {
            String[] valuesarray = (String[]) values;
            String[] criteriaarray = new String[valuesarray.length];
            for (int i = 0; i &lt; valuesarray.length; i++) {
                criteriaarray[i] = "'" + valuesarray[i] + "'" + separator + fullPropName;
            }
            clauseList.add("(" + StringUtils.join(criteriaarray, " or ") + ")");
        }
        return clauseList;
    }

 def makeHQLQueryList(propClass, name, prefix, queryTablePrefix, map) {
       def clauseList = new ArrayList();
       def fullPropName = queryTablePrefix + name;
       def pClass = propClass.getBasePropertyClass();   
  
       def values = map.get(prefix);
        if ((values == null) || (values.equals(""))) {
            return clauseList;
        }
        if (pClass.isMultiSelect())
            fullPropName = "${prefix}list";

        if (values instanceof String) {
            // general comparison '=' - tests at least one value =
            clauseList.add(fullPropName + " = '" + values.toString() + "'");
        } else {
            String[] valuesarray = (String[]) values;
            clauseList.add(fullPropName +  " in ('" + StringUtils.join(valuesarray, "','") + "')");
        }
        return clauseList;
    }

    def makeQueryNumber(propClass, name, prefix, queryTablePrefix, map) {
        def clauseList = new ArrayList();
        def fullPropName = queryTablePrefix + name;

        String exact = (String) map.get(prefix);
        String morethan = (String) map.get(prefix + "_morethan");
        String lessthan = (String) map.get(prefix + "_lessthan");
        if (exact &amp;&amp; exact!="") {
                clauseList.add(fullPropName + " = " + exact);
        } 
        if (morethan &amp;&amp; morethan!="") {
                clauseList.add(fullPropName + " &gt;= " + morethan);
        }
        if (lessthan &amp;&amp; lessthan!="") {
                clauseList.add(fullPropName + " &lt;= " + lessthan);
        } 

        /*
        value = (String) map.get(prefix + "exact");
        if ((value != null) &amp;&amp; (!value.equals(""))) {
            clauseList.add(fullPropName + "=" + value);
        }

        value = (String) map.get(prefix + "not");
        if ((value != null) &amp;&amp; (!value.equals(""))) {
            clauseList.add(fullPropName + "!=" + value);
        }
        */
        return clauseList;
  }

    def makeQueryDate(propClass, name, prefix, queryTablePrefix, map) {
        def clauseList = new ArrayList();
        def fullPropName = queryTablePrefix + name;

        String morethan = (String) map.get(prefix + "_morethan");
        String lessthan = (String) map.get(prefix + "_lessthan");
        def sdformat = getSimpleDateFormat(propClass, name);
        def dmorethan = (morethan==null || morethan=="") ? null : sdformat.parse(morethan);
        def dlessthan = (lessthan==null || lessthan=="") ? null : sdformat.parse(lessthan);
        def qlformat = getSQLSimpleDateFormat();

        if (morethan &amp;&amp; morethan!="") {
                clauseList.add(fullPropName + " &gt;= '" + qlformat.format(dmorethan) + "'");
        }
        if (lessthan &amp;&amp; lessthan!="") {
                clauseList.add(fullPropName + " &lt;= '" + qlformat.format(dlessthan) + "'");
        } 

        /*
        value = (String) map.get(prefix + "exact");
        if ((value != null) &amp;&amp; (!value.equals(""))) {
            clauseList.add(fullPropName + "=" + value);
        }

        value = (String) map.get(prefix + "not");
        if ((value != null) &amp;&amp; (!value.equals(""))) {
            clauseList.add(fullPropName + "!=" + value);
        }
        */
        return clauseList;
  }

 def getTableName(propClass) {  
     if (propClass==null)
         return "";
     def type = propClass.type;
     if (type=='NumberClass') {
         def numberType = propClass.getProperty('numberType').getValue()
         if (numberType=="integer")
            return "IntegerProperty";
         else if (numberType=="float")
            return "FloatProperty";
         else if (numberType=="double")
            return "DoubleProperty";
         else
            return "LongProperty";
     } else if (type=="BooleanClass") {
         return "IntegerProperty";
     } else if (type=="DateClass") {
         return "DateProperty";
     } else if (type=="TextAreaClass"||type=="UsersClass"||type=="GroupsClass") {
         return "LargeStringProperty";
     } else if (type.contains("ListClass")||type=="PageClass") {
         def multiSelect = propClass.getProperty('multiSelect').getValue()
         def relationalStorage = propClass.getProperty('relationalStorage').getValue()
         if (multiSelect &amp;&amp; relationalStorage)
           return "DBStringListProperty";
         else
          return "StringProperty";
     } else {      
        return "StringProperty";
     }
 }

 def getHQLFromAndWhere(query) {
    def className = query.get("searchclass");
    def baseClass = xwiki.getDocument(className).getxWikiClass();
    def clauseList = getHQLWhere(query, baseClass);
    def fromQL = ""
    def whereQL = ""
    for (clause in clauseList) {
            if (clause.joinTable!="") {
               fromQL += "," + clause.joinTable;
               whereQL += clause.joinWhere;
            } 
            whereQL += clause.where.join("");
    }
    return [ "fromQL" : fromQL, "whereQL" : whereQL ];
 }

 def getHQLWhere(query, baseClass) {
    def clauseList = []
          
    for (propName in getPropertyList(baseClass, true)) {
          def propClass = baseClass.get(propName);
          def clause = [ "joinWhere": "", "joinTable":"", "where": [] ];
          def where = ""

          if (propName.startsWith("doc.")) {
            if (propName=="doc.date" || propName=="doc.creationDate") {
               where = makeQueryDate(propClass, propName, propName, "", query);
            } else {
               where =  makeQueryString(propClass, propName, propName, "", query);
            }
            if (where &amp;&amp; where.size()&gt;0) {
               clause.where.addAll(" and " + where.join(" and "));       
            }
         
          } else {
            if (propClass.type.contains("ListClass")) {
             where = makeHQLQueryList(propClass, propName + ".value", propName, "prop", query);
            } else if (propClass.type.contains("NumberClass")) {
             where = makeQueryNumber(propClass, propName + ".value", propName, "prop", query);
            } else if (propClass.type.contains("BooleanClass")) {
             where = makeQueryNumber(propClass, propName + ".value", propName, "prop", query);
            } else if (propClass.type.contains("DateClass")) {
             where = makeQueryDate(propClass, propName + ".value", propName, "prop", query);
            } else {
             where = makeQueryString(propClass, propName + ".value", propName, "prop", query);
            }
            if (where &amp;&amp; where.size()&gt;0) {
             // adding join queries
             def tableName = getTableName(propClass);
             def tableAlias = "prop${propName}";
             if (tableName.equals("DBStringListProperty")) {
              clause.joinTable = "${tableName} as ${tableAlias} join ${tableAlias}.list ${propName}list";   
             } else {
              clause.joinTable = "${tableName} as ${tableAlias}";   
             }
             clause.joinWhere = " and obj.id=${tableAlias}.id.id and ${tableAlias}.id.name='${propName}'"; 
             clause.where.addAll(" and " + where.join(" and "));       
            }
          }
          clauseList.add(clause);
    }
    return clauseList;
 }

 def makeHQLQuery(query) {
        def hqlselect = "";
        def hqlfrom = "";
        def hqlwhere = "";
        def hqlgroupBy = "";
        def hqlorder = "";

        def hasAggregate = false;
        def className = query.get("searchclass");
        def baseClass = xwiki.getDocument(className).getxWikiClass()

        hqlfrom = "XWikiDocument as doc, BaseObject as obj";
        hqlwhere = "doc.fullName=obj.name and obj.className='${className}'";

        def selectList = new ArrayList();
        def groupByList = new ArrayList();
        def joinedtables = new ArrayList();
        def joinedwhere = "";
        def columns = query.get("searchdisplayfields");
        def aggColumns = query.get("searchaggfields");
        for (col in columns) {
             def propClass = baseClass.get(col);
             if (propClass!=null &amp;&amp; propClass.type.contains("Computed")) {
               if (propClass.getProperty('customDisplay').value == '{{include reference="AppWithinMinutes.Title"/}}') {
                  selectList.add("doc.title");
                  groupByList.add("doc.title"); 
               } else if (propClass.getProperty('customDisplay').value == '{{include reference="AppWithinMinutes.Content"/}}') {
                  selectList.add("doc.content"); 
                  groupByList.add("doc.content"); 
               }
             } else {
               def selectClause = "";
               if (!col.startsWith("doc.")) {
                def tableName = getTableName(propClass);
                def tableAlias = "prop${col}"
                if (tableName.equals("DBStringListProperty")) {
                 selectClause = "${col}list"
                 def joinTable = "${tableName} as ${tableAlias} join ${tableAlias}.list ${col}list";
                 joinedtables.add(joinTable);
                 joinedwhere += " and obj.id=${tableAlias}.id.id and ${tableAlias}.id.name='${col}'";                        
                } else { 
                 selectClause = "prop${col}.value"  
                 def joinTable = "${tableName} as ${tableAlias}";
                 joinedtables.add(joinTable);
                 joinedwhere += " and obj.id=prop${col}.id.id and prop${col}.id.name='${col}'";
                }
               } else {
                 selectClause = col;
               }
               selectList.add(selectClause);
               groupByList.add(selectClause);
             }
        }
        for (col in aggColumns) {
           if (col.startsWith("AGG_")) {
             hasAggregate = true;
             def colName = col.replaceAll("AGG_(.*?)_","");
             def propClass = baseClass.get(colName);
             def tableName = getTableName(propClass);
             def tableAlias = "prop${colName}"
             def joinTable = "${tableName} as ${tableAlias}";
             if (!joinedtables.contains(joinTable) &amp;&amp; col!="AGG_COUNT" &amp;&amp; col!="AGG_COUNTDISTINCT") {
               joinedtables.add(joinTable);
               joinedwhere += " and obj.id=prop${colName}.id.id and prop${colName}.id.name='${colName}'";
             }
              
             if (col=="AGG_COUNT") {
               selectList.add("count(doc.fullName)");  
             } else if (col=="AGG_COUNTDISTINCT") {
               selectList.add("count(distinct doc.fullName)");  
             } else if (col.startsWith("AGG_SUM")) {
               selectList.add("sum(prop${colName}.value)");
             } else if (col.startsWith("AGG_AVG")) {
               selectList.add("avg(prop${colName}.value)");
             } else if (col.startsWith("AGG_COUNT")) {
               selectList.add("count(prop${colName}.value})");
             } else if (col.startsWith("AGG_COUNTDISTINCT")) {
               selectList.add("count(distinct prop${colName}.value)");
             }
           }
        }

        hqlselect += selectList.join(",")
        hqlgroupBy += groupByList.join(",")

        def clauseList = getHQLWhere(query, baseClass);
        def restrictionJoinedTables = []
        def restrictionJoinedWhere = ""
        for (clause in clauseList) {
            if (clause.joinTable!="") {
              if (!joinedtables.contains(clause.joinTable)) {
               joinedtables.add(clause.joinTable);
               joinedwhere += clause.joinWhere;
              }
              restrictionJoinedTables.add(clause.joinTable);
              restrictionJoinedWhere += clause.joinWhere;
            }
            hqlwhere += clause.where.join("");
            restrictionJoinedWhere += clause.where.join("")
        }

        hqlwhere += " and doc.fullName not like '%Template'";
        
        def orderjointables = [];
        def orderjoinwhere = "";
        if (query.get("searchorder")!=null &amp;&amp; query.get("searchorder").size()&gt;0) {
         def searchorder = query.get("searchorder").getAt(0)
         if (searchorder!="" &amp;&amp; searchorder!="__defaultsorting__") {
          if (searchorder.startsWith("doc.") || searchorder.startsWith("1 ") || searchorder.startsWith("2 ")) {
            hqlorder += searchorder;
          } else {
            def sortField = searchorder.substring(0, searchorder.indexOf(" "));
            def sortDir = searchorder.substring(searchorder.indexOf(" ") + 1);
            def propClass = baseClass.get(sortField)
            
            // check for computed fields which are not compatible
            if (propClass.type.contains("Computed")) {
               if (propClass.getProperty('customDisplay').value == '{{include reference="AppWithinMinutes.Title"/}}') {
                 hqlorder += "doc.title ${sortDir}";
               } else if (propClass.getProperty('customDisplay').value == '{{include reference="AppWithinMinutes.Content"/}}') {
                 hqlorder += "doc.content ${sortDir}";
               } else {
                 context.put("hasComputedFieldSort","1");
               }
            } else {
                def tableName = getTableName(propClass);
                def tableAlias = "prop${sortField}"
                def orderClause = ""
                if (tableName.equals("DBStringListProperty")) {
                 orderClause = "${sortField}list"
                 def joinTable = "${tableName} as ${tableAlias} join ${tableAlias}.list ${sortField}list";
                 if ((!restrictionJoinedTables.contains(joinTable)) &amp;&amp; (!hasAggregate || !joinedtables.contains(joinTable))) {
                   orderjointables.add(joinTable);
                   orderjoinwhere += " and obj.id=${tableAlias}.id.id and ${tableAlias}.id.name='${sortField}'";  
                 }                      
                } else { 
                 orderClause = "prop${sortField}.value";  
                 def joinTable = "${tableName} as ${tableAlias}";
                 if ((!restrictionJoinedTables.contains(joinTable)) &amp;&amp; (!hasAggregate || !joinedtables.contains(joinTable))) {
                   orderjointables.add(joinTable);
                   orderjoinwhere += " and obj.id=prop${sortField}.id.id and prop${sortField}.id.name='${sortField}'";
                 }
                }
                hqlorder += orderClause + " " + sortDir;
            }
          }
         }
        }

        String hql = "select doc.fullName";
        if (hasAggregate) {
          hql = "select " + hqlselect;
        }

        hql += " from " + hqlfrom;
        if (hasAggregate &amp;&amp; joinedtables.size()&gt;0) {
          hql += ", " + joinedtables.join(", ")
        } else if (restrictionJoinedTables.size()&gt;0) {
          hql += ", " + restrictionJoinedTables.join(", ");
        }
        if (orderjointables.size()&gt;0) {
          hql += ", " + orderjointables.join(", ");
        }
        if (hqlwhere.length() != 0)
            hql += " where " + hqlwhere;
        if (hasAggregate)
            hql += joinedwhere;
        else
            hql += restrictionJoinedWhere;
        hql += orderjoinwhere;
        if (hasAggregate &amp;&amp; hqlgroupBy.length() != 0)
            hql += " group by " + hqlgroupBy;
        if (hqlorder.length() != 0) {
            hql += " order by " + hqlorder;
        }

        return hql;
  }

}
</content>
</xwikidoc>
